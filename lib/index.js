// Generated by CoffeeScript 1.6.2
(function() {
  var SwigRenderer, fs, program, should, swig, swigRenderer, _;

  _ = require('underscore');

  should = require('should');

  swig = require('swig');

  program = require('commander');

  fs = require('fs');

  module.exports = SwigRenderer = (function() {
    var jsonfile, swig_tmpls, vars;

    vars = null;

    swig_tmpls = [];

    jsonfile = null;

    function SwigRenderer(jsonfile, swigs) {
      should.exist(swigs);
      this.swig_tmpls = swigs;
      this.jsonfile = jsonfile;
    }

    SwigRenderer.prototype.run = function() {
      var _this = this;

      if (this.jsonfile) {
        return fs.exists(this.jsonfile, function(exists) {
          var err;

          if (exists) {
            try {
              _this.vars = JSON.parse(fs.readFileSync(_this.jsonfile));
            } catch (_error) {
              err = _error;
              console.log('Error: malformed JSON');
              return -1;
            }
            return _this._render();
          } else {
            console.log("Error: file " + jsonfile + " doesn\'t exist");
            return process.exit(1);
          }
        });
      } else {
        return this._do_stdin();
      }
    };

    SwigRenderer.prototype._do_stdin = function() {
      var _this = this;

      process.stdin.resume();
      process.stdin.setEncoding('utf8');
      process.stdin.on('data', function(chunk) {
        var err;

        if (!chunk.match(/^[ \t\n]*$/g)) {
          try {
            return _this.vars = JSON.parse(chunk);
          } catch (_error) {
            err = _error;
            console.log('Error: malformed JSON');
            return -1;
          }
        }
      });
      return process.stdin.on('end', function() {
        return _this._render();
      });
    };

    SwigRenderer.prototype._render = function() {
      var _this = this;

      if (!this.vars) {
        return console.log('Error: no replacement variables are defined');
      } else {
        return _.each(this.swig_tmpls, function(tmpl) {
          var exists, path, r, t;

          if (!tmpl.match(/^\/.*$/g)) {
            path = process.cwd() + '/' + tmpl;
          } else {
            path = tmpl;
          }
          exists = fs.existsSync(tmpl);
          if (exists) {
            t = swig.compileFile(path);
            r = t.render(_this.vars);
            return console.log(r);
          } else {
            return console.log("Error: " + tmpl + " does not exist");
          }
        });
      }
    };

    return SwigRenderer;

  })();

  program.version('0.0.1').usage('[options] <file ...>').option('-f, --file <file>', 'JSON file name').parse(process.argv);

  swigRenderer = new SwigRenderer(program.file, program.args);

  swigRenderer.run();

}).call(this);
